<aside class="menu" style="position: fixed; left: 0;top: 0;bottom: 0;right: auto;width: 300px; background-color: #f9f9f9; padding: 30px 20px 30px 20px; overflow-y: scroll;">
	@each(header in Object.keys(items))
		<p class="menu-label" :key="header">
            {{ translations[header] }}
        </p>
        <ul class="menu-list">
            @each(item in items[header])
            	<docs.item :active="isActive(header, item.name)" :name="item.name" :items="item.items" :key="item.name" @change="goTo(header, event)"></docs.item>
			@endeach
		</ul>
	@endeach
</aside>

<div class="columns">
    <div class="column is-one-fifth" style="width: 310px;">
    </div>
    <div class="column" style="position: relative;">
    	<div style="position: sticky; top: 0; left: 0; right: 0; background-color: #fff; z-index: 100;">
    		<nav.bar></nav.bar>
    	</div>
        <section class="section" style="padding-top: 40px;">
            <sexy />
        </section>
    </div>
</div>

<!-- <nav.footer></nav.footer> -->


<script>
import { translations } from '../plugins/translations';

let items = {
	'intro': [
		{
			name: 'Get started',
			items: [],
		}, {
			name: 'Installation',
			items: ['Sexy application', 'Manual setup']
		}
	],
	'Single file components': [
		{
			name: "Introduction",
			items: [],
		}, {
			name: "Reactivity",
			items: ['Stateful', 'Computed', 'Watch'],
		}, {
			name: "Template syntax",
			items: ['Text', 'Attributes', 'JavaScript Expressions', 'Directives'],
		}
	],
	'Templates': [
		{
			name: "Class binding",
			items: ['Object syntax', 'Array syntax', 'Mixed syntax', 'Usage with components'],
		}, {
			name: "Style binding",
			items: ['Object syntax', 'Array syntax', 'Usage with components'],
		}, {
			name: "Conditional rendering",
			items: [],
		}, {
			name: "List rendering",
			items: [],
		}, {
			name: "Events",
			items: [],
		}, {
			name: "Form input binding",
			items: ['Input', 'Textarea'], // , 'Radio', 'Checkbox', 'Select'
		}, {
			name: "Directives",
			items: [],
		}
	],
	'Components': [
		{
			name: "Usage",
			items: ['Auto import', 'Manual import', 'Globals', 'Re-usage'],
		}, {
			name: "Properties",
			items: [],
		}, {
			name: "Events",
			items: [],
		}, {
			name: "Slots",
			items: ['Default value', 'Named slots']
		}, {
			name: "Dynamic components",
			items: [],
		}, {
			name: "Lazy loading",
			items: [],
		}, {
			name: "Magic variables",
			items: ['$refs', '$el', '$render']
		} 
	],
	'Transitions': [
		{
			name: "Class based",
			items: [],
		}, {
			name: "Custom transition",
			items: [],
		}
	],
	'Server-side rendering': [
		{
			name: "Get started",
			items: [],
		}, {
			name: "Directory structure",
			items: [],
		}, {
			name: "Pages",
			items: [],
		}, {
			name: "Routing",
			items: ['Dynamic routing', 'Nested routing']
		}, {
			name: "Layouts",
			items: ['Default layout', 'Error layout', 'Custom layout']
		}, {
			name: "Config",
			items: []
		}, {
			name: "Static website",
			items: [],
		}, {
			name: "Advanced",
			items: []
		}, 
	],
}

let itemsPaths = makeUrls(items);

function getPathFromName(name) 
{
	return name.toLowerCase().replace(/\s/g, '-');
}

function makeUrls(items) 
{
	let result = [];

	for(let name in items) {
		let subitems = [];

		for(let name in items) {
		}

		result.push({
			name: name,
			pathname: getPathFromName(name),
			items: subitems,
		})
	}
}

function isActive(dir, name) 
{
	let [ routeDir, routeName ] = $router.getPathname().replace(/^\/docs\//g, '').split('/');

	dir = getPathFromName(dir);
	name = getPathFromName(name);
	
	if(routeDir === dir && routeName === name) {
		return true;
	}

	return false;
}

function goTo(dir, event) {
	let [ pageName, paragraph ] = event.detail;

	dir = getPathFromName(dir);

	let page = getPathFromName(pageName);

	if(paragraph === null) {
		paragraph = '';
	} else {
		paragraph = `#${ getPathFromName(paragraph) }`;
		// getPathFromName(paragraph)
		location.hash = paragraph;
	}

	$router.navigate(`/docs/${dir}/${page}${ paragraph }`);

	window.scrollTo(0, 0);
}
</script>