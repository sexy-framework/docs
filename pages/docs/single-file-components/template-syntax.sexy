<div class="container">
	<h1 class="title">Text</h1>
	<div class="content">
		<p>
			The most basic form of data binding is text interpolation using the “Mustache” syntax (double curly braces):
		</p>
	</div>
	<docs.code type="html" :code="codeExamples.get('text')"></docs.code>
	<div class="content">
		<p>
			The mustache tag will be replaced with the value of the msg property on the corresponding data object. It will also be updated whenever the data object’s msg property changes.
		</p>
	</div>
	<h2 class="title">Attributes</h2>
	<div class="content">
		<p>
			Mustaches cannot be used inside HTML attributes. Instead, use a ':' before attribute name:
		</p>
	</div>
	<docs.code type="html" :code="codeExamples.get('dyn-attribute')"></docs.code>
	<div class="content">
		<p>
			In the case of boolean attributes, where their mere existence implies true, v-bind works a little differently. In this example:
		</p>
	</div>
	<docs.code type="html" :code="codeExamples.get('boolean-attribute')"></docs.code>
	<div class="content">
		<p>
			If isButtonDisabled has the value of null, undefined, or false, the disabled attribute will not even be included in the rendered <button> element.
		</p>
	</div>

	<h2 class="title">Using javascript expressions</h2>
	<div class="content">
		<p>
			So far we’ve only been binding to simple property keys in our templates. But Vue.js actually supports the full power of JavaScript expressions inside all data bindings:
		</p>
	</div>
	<docs.code type="html" :code="codeExamples.get('expr-1')"></docs.code>
	<div class="content">
		<p>
			These expressions will be evaluated as JavaScript in the data scope of the owner Vue instance. One restriction is that each binding can only contain one single expression, so the following will NOT work:
		</p>
	</div>
	<docs.code type="html" :code="codeExamples.get('expr-2')"></docs.code>

	<h2 class="title">Directives</h2>
	<div class="content">
		<p>
			Directives are special attributes inside brackets (attributeName). Directive attribute values are expected to be a single JavaScript expression. A directive’s job is to reactively apply side effects to the DOM when the value of its expression changes. Let’s review the example we saw in the introduction:
		</p>
	</div>
	<docs.code type="javascript" :code="codeExamples.get('directive')"></docs.code>

	
</div>

<script>
export { Layout } from '@layouts/docs.sexy';

let codeExamples = new Map();

codeExamples.set('text', `
<span>Message: {{ msg }}</span>
`);

codeExamples.set('dyn-attribute', `
<div :id="dynamicId"></div>
`);

codeExamples.set('boolean-attribute', `
<button v-bind:disabled="isButtonDisabled">Button</button>
`);

codeExamples.set('expr-1', `
{{ number + 1 }}

{{ ok ? 'YES' : 'NO' }}

{{ message.split('').reverse().join('') }}

<div v-bind:id="'list-' + id"></div>
`);

codeExamples.set('expr-2', `
<!-- this is a statement, not an expression: -->
{{ var a = 1 }}

<!-- flow control won't work either, use ternary expressions -->
{{ if (ok) { return message } }}
`);

codeExamples.set('directive', `
<input type="text" (bind)="nameValue"/>
`);

</script>