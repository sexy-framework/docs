<div class="container content">
	<h2 class="title" id="text">
		Текст
	</h2>
	<p>
		Самая обычный вариант использования привязывания данных – это Mustache-подобный синтаксис:
	</p>
	<docs.code type="html" code="<span>Message: {{ msg }}</span>"></docs.code>
	<p>
		Mustache-синтаксис будет заменен значением переменной msg. Если она реактивная, то и при изменении msg код также будет изменятся и в DOM будет отображаться новое значение msg.
	</p>

	<br>
	<h2 class="title" id="attributes">
		Атрибуты
	</h2>
	<p>
		Чтобы использовать Javascript в атрибутах, необходимо маркировать данный атрибут с помощью :.
	</p>
	<docs.code type="html" code='<div :id="dynamicId"></div>'></docs.code>
	<p>
		Если этого не сделать, то id будет равно dynamicId, а не значение данной переменной.
	</p>
	<p>
		Для boolean переменных, все работает также, но если значение переменной null, undefined или false, то атрибут пропадает из DOM.
	</p>
	
	<br>
	<h2 class="title" id="javascript-expressions">
		Использование Javascript expressions
	</h2>
	<p>
		Sexy также поддерживает всю мощь Javascript expressions:
	</p>
	<docs.code type="javascript" :code="codeExamples.get('expr-js')"></docs.code>
	<docs.code type="html" :code="codeExamples.get('expr-html')"></docs.code>
	<p>
		Нужно разграничивать Javascript expressions и statements:
	</p>
	<docs.code type="html" :code="codeExamples.get('expr-error')"></docs.code>
	<p>
		Такой код должен использовать только в блоке описание логики компонента – теге Script.
	</p>
	<p>
		Также, если вы используете реактивные переменные или свойства компонентов, в шаблоне не нужно вызывать данную переменную:
	</p>
	<docs.code type="html" :code="codeExamples.get('stateful')"></docs.code>
	<br>
	<h2 class="title" id="directives">
		Директивы
	</h2>
	<p>
		Директивы – это специальные атрибуты, которые оборачиваются в скобочки (название_директивы). Значение данного атрибута – всегда Javascript expression.
	</p>
	<p>
		Sexy директивы позволяет применять свой код для обработки значений и применений их для DOM элементов. Вы можете навешивать любые события, и изменять DOM элемент как угодно.
	</p>
	<p>
		Например, так происходит привязка данных к input (two way data binding):
	</p>
	<docs.code type="html" :code="codeExamples.get('directives')"></docs.code>
</div>

<script>
export { Layout } from '@layouts/docs.sexy';

let codeExamples = new Map();

codeExamples.set('expr-js', `
{{ number + 1 }}

{{ ok ? 'YES' : 'NO' }}

{{ message.split('').reverse().join('') }}
`);

codeExamples.set('expr-html', `
<div :id="'list-' + id"></div>
`);

codeExamples.set('expr-error', `
<!-- this is a statement, not an expression: -->
{{ var a = 1 }}

<!-- flow control won't work either, use ternary expressions -->
{{ if (ok) { return message } }}
`);

codeExamples.set('stateful', `
<!-- Так правильно -->
<div :data-value=”counter”>{{ counter + 1 }}</div>

<!-- Так не правильно -->
<div :data-value=”counter()”>{{ counter() + 1 }}</div>

<script>
Let counter = o(1);
</script>
`);

codeExamples.set('directives', `
<input type="text" (bind)="nameValue"/>
<script>
import { bind } from ‘sexy/directives’;
</script>
`);
</script>