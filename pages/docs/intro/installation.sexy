<div class="container content">

	Существует два способа начать использовать Sexy фреймворк:

	<ol type="1">
		<li>
			Простой – создать веб-приложение и начать писать код
		</li>
		<li>
			Сложный – Подключить библиотеки вручную и настроить бандлер (webpack)
		</li>
	</ol>

	<h2 class="title">Создаем первое Sexy приложение</h2>

	<p>
		Приложение сразу будет использовать серверный рендеринг и включать оптимизации производительности.
	</p>
	<p>
		Для того, чтобы создать первое Sexy приложение введите в терминале:
	</p>

	<docs.code type="console" code="npx create-sexy-app my-app"></docs.code>

	<p>
		Все! Приложение создано, теперь его можно запустить в режиме разработчика или произвести сборку.
	</p>

	<p>
		Запустить проект в режиме разработчика:
	</p>
	<docs.code type="console" code="npm run dev"></docs.code>

	<p>
		Создать production-ready сборку
	</p>
	<docs.code type="console" code="npm run build"></docs.code>

	<p>
		Запустить сервер на созданной сборке
	</p>
	<docs.code type="console" code="npm run start"></docs.code>
	
	<br>

	<h2 class="title">Ручная установка и использование Sexy фреймворка</h2>

	<p>
		Вам нужно минимум два пакета: сам фреймворк и его загрузчик (webpack loader).
	</p>
	<docs.code type="console" code="npm install sexy-framework sexy-loader --save"></docs.code>

	<p>
		После этого необходимо зарегистрировать load для sexy файлов в webpack:
	</p>
	<docs.code type="javascript" :code="codeExamples.get('webpack-loader')"></docs.code>

	<p>
		Важно, загрузчик должен включать информацию о пути, где будут находиться компоненты для автоматического импорта в проект. Но вы также можете подключать компоненты вручную (не используя авто-импорт).
	</p>
	<p>
		Чтобы произвести первый рендеринг необходимо создать компонент и отрендерить его на странице:
	</p>
	<docs.code type="javascript" :code="codeExamples.get('usage')"></docs.code>
	<p>
		Где Layout – это корневой ID элемента, где будет работать Sexy фреймоврк.
	</p>
</div>

<script>
export { Layout } from '@layouts/docs.sexy';

let codeExamples = new Map();

codeExamples.set('webpack-loader', `
module: {
	rules: [
		{
			test: /.sexy$/i,
			use: [{
				loader: 'sexy-loader',
				options: {
					path: './components', // path to folder where components located
					styles: true,
				}
			}]
		},
	]
}
`);

codeExamples.set('usage', `
import { render } from 'sexy-framework/render';
import HelloWorld from './components/hello-world.sexy';

const layout = document.getElementById('layout');

render(HelloWorld, layout);
`);
</script>