<div class="container">
	<div class="content">
		You can start your application by:
		<ol type="1">
			<li>
				Setting up sexy-loader and webpack manually 
			</li>
			<li>
				Use boilerplate to create simple sexy app with server-side rendering
			</li>
		</ol>
	</div>
	<h2 class="title">Manual use</h2>
	<h3 class="title is-5">Sexy framework</h3>
	<div class="content">
		<p>
			First of all you need to install package and setup bundler to load sexy components
		</p>
	</div>
	<docs.code type="console" :code="codeExamples.get('npm')"></docs.code>
	<docs.code type="console" :code="codeExamples.get('yarn')"></docs.code>
	<h3 class="title is-5">Webpack</h3>
	<div class="content">
		<p>
			Add sexy-loader to your webpack config to start load sexy components (*.sexy)
		</p>
	</div>
	<docs.code type="javascript" :code="codeExamples.get('webpack-loader')"></docs.code>
	<h3 class="title">Server side rendering</h3>
	<div class="content">
		Use boilerplate to create example app with fast server-side rendering.
		You also can change server to your own by modifying server/server.js
	</div>
	<docs.code type="javascript" :code="codeExamples.get('yarn')"></docs.code>
</div>

<script>
export { Layout } from '@layouts/docs.sexy';

let codeExamples = new Map();

codeExamples.set('npm', `
npm install sexy-framework sexy-loader --save
`);

codeExamples.set('yarn', `
yard add sexy-framework sexy-loader 
`);

codeExamples.set('webpack-loader', `
module: {
  rules: [
    {
      test: /\.sexy$/i,
      use: [{
        loader: 'sexy-loader',
        options: {
          path: './components', // path to folder where components located
          styles: true,
        }
      }]
    },
  ]
}
`);
</script>